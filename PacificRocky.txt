Surfing
현재 만들고 있는 주식 알고리즘 트레이딩 시스템
로컬(LG Gram notebook)에서 개발한 후 Long Beach(server)로 이관할 예정
Long Beach는 주식 트레이딩용 서버
GCP 또는 AWS를 사용할 예정

"""
1. 구현하고 싶은 것을 정의한다.
2. 구현은 어떻게 할지 생각한다.
3. 구현 과정에서 내가 모르는 부분이 무엇인지 나열한다.
4. 모르는 부분은 어디서 배울 수 있는지 생각한다.(대부분 공식문서, 개발블로그, 스택오버플로우 등에서 찾을 수 있다.)
5. 실제 코드로 구현한다.
6. 구현하는 과정에서 새롭게 알게 된 것들을 따로 정리해서 문서로 남겨놓는다.
7. 구현이 완료되면 테스트를 진행한다.
"""

=================================================================================================================================

# 주체
1. 투자자(User) : 나, 성주, 다른 사람들 등 투자금을 트레이딩 시스템에 투입하는 주체
2. 트레이딩 시스템 : 투자자로부터 자본을 받아 알고리즘 트레이딩을 수행하는 시스템
  2-1. Surfing : 주식 알고리즘 트레이딩 시스템
  2-2. Voyage : 코인 알고리즘 트레이딩 시스템
3. 트레이딩 서버 : 트레이딩 시스템이 돌아가는 서버
  2-1. Long Beach : Surfing이 돌아가는 서버
  2-2. Ocean : Voyage가 돌아가는 서버는 서버
4. 종목
5. 전략


=================================================================================================================================

# 테이블

1. 유저 테이블(원장성 테이블) : 투자자 정보가 담겨있는 테이블
  1-1. 유저 아이디(user_id) : 데이터베이스 상 id
  1-2. 유저명(user_name) : 유저 이름
  1-3. 유저코드(user_code) : 유저 코드(등급)
  1-4. 유저계좌번호(user_account_number)
  1-5. 서비스 가입 날짜
  1-8. 투자금액
  1-9. 인출금액
  1-10. 위험률(risk ratio) : 총투자금의 몇 %를 위험관리 할 것인지
  1-11. 최종수정 datetime
  1-12. 최종수정 유저

2. 유저 이력 테이블(이력 테이블) : 투자자 계좌의 변동사항을 기록하는 테이블
  2-1. 유저명
  2-2. 투자 시작날짜
  2-3. 투자 종료날짜
  2-4. 변동코드(이름 변경, 계좌번호 변경, 위험률 변경 등)
  2-5. 수정 datetime
  2-6. 수정 유저

3. 유저 매매내역 테이블(이력 테이블) : 
  3-1. 유저명
  3-2. 매매종목
  3-3. 매매수량
  3-4. 매매단가 : tick 단위
  3-5. 매매종류 : 매수/매도
  3-6. 주문종류 : 시장가/지정가
  3-4. 

4. 탈퇴 유저 테이블

5. 종목 테이블(원장성 테이블) : 거래소에서 거래되는 종목
  5-1. 종목코드
  5-2. 종목명
  5-3. 시장
  5-4. 

4. 종목 이력 테이블(이력 테이블) : 종목의 변동사항을 기록하는 테이블
  4-1. 종목명
  4-2. 종목코드
  4-3. 변동코드(신규상장, 상장폐지, 종목명 변경 등)
  4-4. 수정 datetime
  4-5. 수정 유저

2. (종목)일별 거래 테이블 : 일별 가격 및 거래량 데이터를 저장하는 테이블
  * 코스피, 코스닥 각 각 하나씩 테이블을 생성한다

3. (종목)분별 거래 테이블 : 분별 가격 및 거래량 데이터를 저장하는 테이블
  * 코스피, 코스닥 각 각 하나씩 테이블을 생성한다.

4. 거래내역
  * 모든 거래는 종목으로 추적가능하다.
  * 유저별 투자 내역도 거래내역으로 계산 가능하다.
  4-1. 유저명
  4-3. 마켓명
  4-1. 종목명
  4-2. 종목코드
  4-2. 체결시간
  4-6. 거래단가(Tick)
  4-5. 거래수량(Tick)
  4-3. 

5. 미체결 내역

6. 전략현황

=================================================================================================================================

# 구현되어야 하는 기능
1. 증권사에서 데이터 송수신
2. 데이터베이스에서 데이터 송수신
3. 위험관리 기능
4. 자산관리 기능
5. 투자평가 기능(Performance)
6. 승률 계산 모듈
7. 수익률 계산 모듈
8. 손익비 계산 모듈
9. 백테스트 모듈
10. 화면 모듈

=================================================================================================================================

# 현재 내가 모르는 것들
1. OpenAPI+를 통해 실제 매매를 어떻게 진행하는가
2. PyMySQL과 sqlalchemy의 차이점은 무엇인가
3. loguru 사용법
4. 로그는 어떤 식으로 쌓아야하는가
5. MySQL 서비스에서 다수의 datadir 설정하는 방법
6. 신규상장 및 상장폐지 종목은 어떻게 예외처리 할 것인가
7. 거래위험종목은 어떻게 예외처리 할 것인가

=================================================================================================================================

# 참고사항
## 업무관점의 데이터 테이블 종류
1. 원장성 테이블(Master Table)
  1) 구성형태
    - 업무의 핵심 개체(Entity)로서 주로 업무성격의 주체(Subject)에 대한 정보를 담고 있다.
      . 주체(Subject)란 행위(Behavior)의 주체다. 
      . 모든 업무의 프로세스는 주체, 행위, 대상(Target, Object)로 집약된다. 
      . 홍길동이 컴퓨터를 카드로 구입했다 => 홍길동과 카드는 주체로 각각 사람주체와 사물주체를 의미하며, 구입했다는 것은 행위, 컴퓨터는 대상이 된다. 
      . 홍길동은 고객정보 마스터 테이블, 카드는 카드정보 마스터 테이블, 구입했다는 거래내역 슬레이브 테이블, 컴퓨터는 주문상품정보 대상 테이블이 된다. 
    - 부속된 많은 자식 테이블(Child Table)을 거느린다.
    - 이력 테이블(History Table)도 부속되어 있다.
  2) 데이터 성격
    - 가장 최신의 상태와 속성 정보를 유지, 관리한다. 
    - 가령 고객정보 마스터 테이블을 예로 들면, 홍길동이란 사람은 많은 속성을 가지고 있고 늘 최신의 정보상태를 유지한다. 
    - 속성에는 불변 속성과 가변 속성이 존재한다. 
    - 가변 속성을 관리하기 위해 이력 테이블(History Table)이 존재한다. 
    - 원장성 테이블에 부속된 이력 테이블이 없다면 많은 문제점에 노출된다.

2. 거래성 테이블(Transactional Table)
  1) 구성형태
    - 행위 테이블을 말하는 것으로, "카드거래내역 테이블, 입출금내역 테이블" 등이 해당된다.
  2) 데이터 성격
    - 원칙적으로 거래성 테이블은 등록만 되는 개념이지, 변경되는 개념이 아니다. 
    - "카드거래내역 테이블"을 본다면 카드 승인시에 승인기록이 저장되고, 이를 정정하기 위해서는 변경이 발생하는 것이 아니라 최소기록을 등록하게 된다.
    - 어떠한 경우도 한 번 등록된 내용을 변경하는 경우는 없다. 
    - 따라서 이력테이블이 존재하지 않는다.

3. 양면성 테이블(Duplicity Table)
  1) 구성형태
    - 예를 들어 카드를 발급받기 위해 카드신청서를 작성했다고 가정하자. 전산 시스템엔 "카드신청 테이블"이 존재하게 될 것이다.
    - 신청이라는 행위의 활동이므로 거래성 테이블로 분류될 수 있는데, 온전한 거래성 테이블로 볼 수 없다.
    - 왜냐하면 잘못 작성한 경우 동일한 내용을 수정(Update)하는 경우가 발생하기 때문이다.
    - 이런 틀성 때문에 이력 테이블을 거느리는 형태를 띄게 된다. 
      꼭 이력 테이블이 존재한다는 의미보다는 설계 당시 이력 테이블이 고려되지 않았다면 실제로 이력 테이블이 없을 수도 있다.
    - 신청이라는 행위의 정보를 저장한다는 측면에서 거래성 테이블(Transactional Table)의 성격을 가지고 있고,
      변경이 발생하고 이력 테이블을 거느리고 있다는 측면에서 원장성 테이블(Master Table)의 성격을 가지고 있는 것이다.
  2) 데이터 성격
    - 최신의 상태정보를 유지하고 있다. 
    - 다만 거래성 테이블의 특성을 겸하고 있으므로 테이블의 키값은 신청번호가 될 수밖에 없다.

4. 이력 테이블(History Table)
  1) 구성형태
    - 이력 테이블은 원장성 테이블(Master Table)의 변경된 상태 속성 정보를 보관하는 역할을 한다. 
    - 원장성 테이블의 외부에 동일한 구조를 가지고 있는 외부 이력 테이블(Outer History Table) 형태와
      원장성 테이블의 내부에 상위키(Upper Key) 속성 컬럼을 포함시켜 내부순환(Recursive) 구조를 가진 내부이력 테이블(Inner History Table) 형태,
      원장성 테이블의 중요 상태정보만을 이력관리하는 중요항목이력 테이블(Hot-Item History Table) 형태가 있다.
  2) 데이터 성격
    - 변경된 상태정보를 시작시점 ~ 종료시점의 구간으로 하는 선분이력(Line History) 형태로 관리될 수도 있고
      변경시점을 기준으로 하는 점이력(Point History) 형태로 관리될 수도 있다.
    - 선분이력 테이블(Line History Table)은 주로 원장성 테이블에 구축되며
      점이력 테이블(Point History Table)은 주로 양면성 테이블에 구축된다.

5. 정리
  - 원칙적으로 원장성 테이블의 경우 시계열로 구축이 된다.
  - 원장성 테이블의 특성에 따라 스냅샷이력 테이블(Snapshot History Table)

