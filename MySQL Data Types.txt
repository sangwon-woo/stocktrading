MySQL 데이터 타입 종류

MySQL은 숫자 유형, 날짜 및 시간 유형, 문자열(문자 및 바이트) 유형, 공간 유형 및 JSON 데이터 유형과 같은 여러 범주의 SQL 데이터 유형을 지원합니다. 
이 장에서는 각 범주의 유형 속성에 대한 개요 및 자세한 설명과 데이터 유형 저장 요구 사항에 대한 요약을 제공합니다. 
초기 개요는 의도적으로 간략합니다. 
값을 지정할 수 있는 허용되는 형식과 같은 특정 데이터 유형에 대한 추가 정보는 보다 자세한 설명을 참조하십시오.

데이터 유형 설명은 다음 규칙을 사용합니다.

- 정수 유형의 경우 M은 최대 표시 너비를 나타냅니다. 부동 소수점 및 고정 소수점 유형의 경우 M은 저장할 수 있는 총 자릿수(정밀도)입니다. 
  문자열 유형의 경우 M은 최대 길이입니다. M의 최대 허용 값은 데이터 유형에 따라 다릅니다.
- D는 부동 소수점 및 고정 소수점 유형에 적용되며 소수점 이하 자릿수(스케일)를 나타냅니다. 가능한 최대 값은 30이지만 M-2보다 크지 않아야 합니다.
- fsp는 TIME, DATETIME 및 TIMESTAMP 유형에 적용되며 소수 초 정밀도를 나타냅니다. 즉, 초의 소수 부분에 대한 소수점 이하 자릿수입니다. 
  fsp 값이 주어진 경우 0에서 6 사이여야 합니다. 값이 0이면 소수 부분이 없음을 나타냅니다. 생략하면 기본 정밀도는 0입니다. 
  (이전 MySQL 버전과의 호환성을 위해 표준 SQL 기본값인 6과 다릅니다.)
- 대괄호([ 및 ])는 유형 정의의 선택적 부분을 나타냅니다.

11.1 숫자 데이터 유형
11.1.1 숫자 데이터 유형 구문
11.1.2 정수 유형(정확한 값) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT
11.1.3 고정 소수점 유형(정확한 값) - DECIMAL, NUMERIC
11.1.4 부동 소수점 유형(근사값) - FLOAT, DOUBLE
11.1.5 비트 값 유형 - BIT
11.1.6 숫자 유형 속성
11.1.7 범위 초과 및 오버플로 처리

MySQL은 모든 표준 SQL 숫자 데이터 유형을 지원합니다. 
이러한 유형에는 정확한 숫자 데이터 유형(INTEGER, SMALLINT, DECIMAL 및 NUMERIC)과 대략적인 숫자 데이터 유형(FLOAT, REAL 및 DOUBLE PRECISION)이 포함됩니다. 
키워드 INT는 INTEGER의 동의어이고 키워드 DEC 및 FIXED는 DECIMAL의 동의어입니다. 
MySQL은 DOUBLE을 DOUBLE PRECISION(비표준 확장)의 동의어로 취급합니다. 
MySQL은 또한 REAL_AS_FLOAT SQL 모드가 활성화되지 않는 한 REAL을 DOUBLE PRECISION(비표준 변형)의 동의어로 취급합니다.

BIT 데이터 유형은 비트 값을 저장하며 MyISAM, MEMORY, InnoDB 및 NDB 테이블에 대해 지원됩니다.

MySQL이 표현식 평가 중 열에 대한 범위를 벗어난 값의 할당과 오버플로를 처리하는 방법에 대한 정보는 11.1.7절 “범위를 벗어나고 오버플로 처리”를 참조하십시오.

숫자 데이터 유형의 저장 요구 사항에 대한 정보는 11.7절 “데이터 유형 저장 요구 사항”에서 참조하십시오.

숫자 값에 대해 작동하는 함수에 대한 설명은 12.6절 “숫자 함수 및 연산자”를 참조하십시오. 
숫자 피연산자에 대한 계산 결과에 사용되는 데이터 유형은 피연산자의 유형과 피연산자에 대해 수행되는 연산에 따라 다릅니다. 
자세한 내용은 12.6.1절 “산술 연산자”에서 참조하십시오.

11.1.1 숫자 데이터 유형 구문

정수 데이터 유형의 경우 M은 최대 표시 너비를 나타냅니다. 최대 표시 너비는 255입니다. 
표시 너비는 11.1.6절 “숫자 유형 속성”에 설명된 대로 유형이 저장할 수 있는 값의 범위와 관련이 없습니다.

부동 소수점 및 고정 소수점 데이터 유형의 경우 M은 저장할 수 있는 총 자릿수입니다.

MySQL 8.0.17부터 display width 속성은 정수 데이터 유형에 대해 더 이상 사용되지 않습니다. 향후 MySQL 버전에서는 지원이 제거될 것으로 예상해야 합니다.

숫자 열에 대해 ZEROFILL을 지정하면 MySQL은 자동으로 해당 열에 UNSIGNED 속성을 추가합니다.

MySQL 8.0.17부터 ZEROFILL 속성은 숫자 데이터 유형에 대해 더 이상 사용되지 않습니다. 향후 MySQL 버전에서는 지원이 제거될 것으로 예상해야 합니다. 
이 속성의 효과를 생성하는 대체 수단을 사용하는 것을 고려하십시오. 
예를 들어, 응용 프로그램은 LPAD() 함수를 사용하여 원하는 너비까지 숫자를 0으로 채우거나 형식이 지정된 숫자를 CHAR 열에 저장할 수 있습니다.

UNSIGNED 속성을 허용하는 숫자 데이터 유형은 SIGNED도 허용합니다. 
그러나 이러한 데이터 유형은 기본적으로 signed 되므로 SIGNED 속성은 영향을 미치지 않습니다.

MySQL 8.0.17부터 UNSIGNED 속성은 FLOAT, DOUBLE 및 DECIMAL 유형의 열(및 모든 동의어)에 대해 더 이상 사용되지 않습니다. 
향후 MySQL 버전에서는 지원이 제거될 것으로 예상해야 합니다. 이러한 열 대신에 간단한 CHECK 제약 조건을 사용하는 것이 좋습니다.

SERIAL은 BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE의 별칭입니다.

정수 열 정의에서 SERIAL DEFAULT VALUE는 NOT NULL AUTO_INCREMENT UNIQUE에 대한 별칭입니다.

- BIT[(M)]
  비트 값 유형입니다. M은 1에서 64 사이의 값당 비트 수를 나타냅니다. M이 생략된 경우 기본값은 1입니다.
- TINYINT[(M)] [UNSIGNED] [ZEROFILL]
  매우 작은 정수입니다. 부호 있는 범위는 -128 ~ 127입니다. 부호 없는 범위는 0 ~ 255입니다.
- BOOL, BOOLEAN
  이러한 유형은 TINYINT(1)의 동의어입니다. 값이 0이면 false로 간주됩니다. 0이 아닌 값은 true로 간주됩니다.

- SMALLINT[(M)] [서명되지 않음] [ZEROFILL]
  작은 정수. 부호 있는 범위는 -32768 ~ 32767입니다. 부호 없는 범위는 0 ~ 65535입니다.

- MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]
  중간 크기의 정수입니다. 부호 있는 범위는 -8388608 ~ 8388607입니다. 부호 없는 범위는 0 ~ 16777215입니다.

-INT[(M)] [UNSIGNED] [ZEROFILL]
  일반 크기의 정수입니다. 부호 있는 범위는 -2147483648 ~ 2147483647입니다. 부호 없는 범위는 0 ~ 4294967295입니다.

- INTEGER[(M)] [UNSIGNED] [ZEROFILL]
  이 유형은 INT의 동의어입니다.

- BIGINT[(M)] [UNSIGNED] [ZEROFILL]
  큰 정수입니다. 부호 있는 범위는 -9223372036854775808 ~ 9223372036854775807입니다. 부호 없는 범위는 0 ~ 18446744073709551615입니다.
  SERIAL은 BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE의 별칭입니다.
  BIGINT 열과 관련하여 알아야 할 몇 가지 사항:
    모든 산술은 부호 있는 BIGINT 또는 DOUBLE 값을 사용하여 수행되므로 비트 함수를 제외하고 9223372036854775807(63비트)보다 큰 부호 없는 큰 정수를 사용해서는 안 됩니다! 
    그렇게 하면 BIGINT 값을 DOUBLE로 변환할 때 반올림 오류로 인해 결과의 마지막 숫자 중 일부가 틀릴 수 있습니다.
    MySQL은 다음과 같은 경우 BIGINT를 처리할 수 있습니다.
        정수를 사용하여 BIGINT 열에 큰 부호 없는 값을 저장할 때.
        MIN(col_name) 또는 MAX(col_name)에서 col_name은 BIGINT 열을 나타냅니다.
        두 피연산자가 모두 정수인 연산자(+, -, * 등)를 사용할 때.
    문자열을 사용하여 저장하여 항상 정확한 정수 값을 BIGINT 열에 저장할 수 있습니다. 
    이 경우 MySQL은 중간 배정밀도 표현을 포함하지 않는 문자열에서 숫자로의 변환을 수행합니다.
    -, + 및 * 연산자는 두 피연산자가 모두 정수 값인 경우 BIGINT 산술을 사용합니다. 
    즉, 두 개의 큰 정수(또는 정수를 반환하는 함수의 결과)를 곱하면 결과가 9223372036854775807보다 크면 예기치 않은 결과가 발생할 수 있습니다.

- DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL]
  압축된 "정확한" 고정 소수점 수입니다. M은 총 자릿수(정밀도)이고 D는 소수점 이하 자릿수(스케일)입니다. 소수점과 (음수의 경우) - 기호는 M에서 계산되지 않습니다. 
  D가 0이면 값에는 소수점이나 소수 부분이 없습니다. DECIMAL의 최대 자릿수(M)는 65입니다. 지원되는 최대 소수 자릿수(D)는 30입니다. 
  D를 생략하면 기본값은 0입니다. M을 생략하면 기본값은 10입니다. DECIMAL 리터럴의 텍스트 길이 제한, 섹션 12.25.3, “표현식 처리” 참조)
  UNSIGNED는 지정된 경우 음수 값을 허용하지 않습니다. MySQL 8.0.17부터 UNSIGNED 속성은 DECIMAL 유형의 열(및 모든 동의어)에 대해 더 이상 사용되지 않습니다. 
  향후 MySQL 버전에서는 지원이 제거될 것으로 예상해야 합니다. 이러한 열 대신에 간단한 CHECK 제약 조건을 사용하는 것이 좋습니다.
  DECIMAL 열이 있는 모든 기본 계산(+, -, *, /)은 65자리의 정밀도로 수행됩니다.
  DEC[(M[,D])] [UNSIGNED] [ZEROFILL], 숫자[(M[,D])] [UNSIGNED] [ZEROFILL], FIXED[(M[,D])] [UNSIGNED] [ZEROFILL]
  이러한 유형은 DECIMAL의 동의어입니다. FIXED 동의어는 다른 데이터베이스 시스템과의 호환성을 위해 사용할 수 있습니다.

- FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]
  작은(단정밀도) 부동 소수점 숫자입니다. 허용되는 값은 -3.402823466E+38 ~ -1.175494351E-38, 0 및 1.175494351E-38 ~ 3.402823466E+38입니다. 
  IEEE 표준을 기반으로 하는 이론적인 한계입니다. 실제 범위는 하드웨어 또는 운영 체제에 따라 약간 더 작을 수 있습니다.
  M은 총 자릿수이고 D는 소수점 이하 자릿수입니다. M과 D가 생략되면 값은 하드웨어에서 허용하는 한계까지 저장됩니다. 단정밀도 부동 소수점 숫자는 소수점 이하 약 7자리까지 정확합니다.
  FLOAT(M,D)는 비표준 MySQL 확장입니다. MySQL 8.0.17부터 이 구문은 더 이상 사용되지 않으며 향후 MySQL 버전에서는 이 구문에 대한 지원이 제거될 것으로 예상해야 합니다.
  UNSIGNED는 지정된 경우 음수 값을 허용하지 않습니다. 
  MySQL 8.0.17부터 UNSIGNED 속성은 FLOAT 유형의 열(및 모든 동의어)에 대해 더 이상 사용되지 않으며 향후 MySQL 버전에서 제거될 것으로 예상해야 합니다. 
이러한 열 대신에 간단한 CHECK 제약 조건을 사용하는 것이 좋습니다.
  FLOAT를 사용하면 MySQL의 모든 계산이 배정밀도로 수행되기 때문에 예상치 못한 문제가 발생할 수 있습니다. B.3.4.7절. “일치하는 행이 없는 문제 해결”을 참조하십시오.

- FLOAT(p) [UNSIGNED] [ZEROFILL]
  부동 소수점 숫자입니다. p는 비트 단위의 정밀도를 나타내지만 MySQL은 결과 데이터 유형에 대해 FLOAT 또는 DOUBLE을 사용할지 여부를 결정하기 위해서만 이 값을 사용합니다. 
  p가 0에서 24 사이이면 데이터 유형은 M 또는 D 값이 없는 FLOAT가 됩니다. p가 25~53이면 데이터 유형은 M 또는 D 값이 없는 DOUBLE이 됩니다. 
  결과 열의 범위는 이 섹션의 앞부분에서 설명한 단정밀도 FLOAT 또는 배정밀도 DOUBLE 데이터 유형과 동일합니다.
  UNSIGNED는 지정된 경우 음수 값을 허용하지 않습니다. 
  MySQL 8.0.17부터 UNSIGNED 속성은 FLOAT 유형의 열(및 모든 동의어)에 대해 더 이상 사용되지 않으며 향후 MySQL 버전에서 제거될 것으로 예상해야 합니다.
  이러한 열 대신에 간단한 CHECK 제약 조건을 사용하는 것이 좋습니다.
  FLOAT(p) 구문은 ODBC 호환성을 위해 제공됩니다.

- DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]
  일반 크기(배정밀도) 부동 소수점 숫자입니다. 허용되는 값은 -1.7976931348623157E+308 ~ -2.2250738585072014E-308, 0 및 2.2250738585072014E-308 ~ 1.7976931348입니다. 
  IEEE 표준을 기반으로 하는 이론적인 한계입니다. 실제 범위는 하드웨어 또는 운영 체제에 따라 약간 더 작을 수 있습니다.
  M은 총 자릿수이고 D는 소수점 이하 자릿수입니다. M과 D가 생략되면 값은 하드웨어에서 허용하는 한계까지 저장됩니다. 배정밀도 부동 소수점 숫자는 대략 소수점 이하 15자리까지 정확합니다.
  DOUBLE(M,D)는 비표준 MySQL 확장입니다. MySQL 8.0.17부터 이 구문은 더 이상 사용되지 않으며 향후 MySQL 버전에서는 이 구문에 대한 지원이 제거될 것으로 예상해야 합니다.
  UNSIGNED는 지정된 경우 음수 값을 허용하지 않습니다. 
  MySQL 8.0.17부터 UNSIGNED 속성은 DOUBLE 유형의 열(및 모든 동의어)에 대해 더 이상 사용되지 않으며 향후 MySQL 버전에서 지원이 제거될 것으로 예상해야 합니다. 이러한 열 대신에 간단한 CHECK 제약 조건을 사용하는 것이 좋습니다.

- DOUBLE PRECISION[(M,D)] [UNSIGNED] [ZEROFILL], REAL[(M,D)] [UNSIGNED] [ZEROFILL]
  이러한 유형은 DOUBLE의 동의어입니다. 
  예외: REAL_AS_FLOAT SQL 모드가 활성화된 경우 REAL은 DOUBLE이 아닌 FLOAT의 동의어입니다.























































  



